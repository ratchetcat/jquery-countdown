// Generated by CoffeeScript 1.3.3

/*
jquery-countdown
================
See https://github.com/ratchetcat/jquery-countdown

License
=======

This plugin was written in 2013 by Jon Fuller and is released under the MIT license.
*/


(function() {
  var $;

  $ = jQuery;

  $.fn.extend({
    countdown: function(options) {
      var defaults, millisecondsToEnd, settings;
      defaults = {
        eventPrefix: 'countdown',
        interval: 5000,
        onEnd: function(data) {},
        onUpdate: function(data) {},
        onError: function(data) {},
        parseDateTime: function(input) {
          var temp;
          temp = ('' + input).replace(/-/g, "/").replace(/[TZ]/g, " ");
          return new Date(temp);
        }
      };
      settings = $.extend(defaults, options);
      millisecondsToEnd = function(date, options) {
        if (!(date instanceof Date)) {
          return 0;
        }
        return new Date().getTime() - date;
      };
      return this.each(function() {
        var data, el, parsedDate, text, update;
        el = $(this);
        text = el.text();
        parsedDate = null;
        data = {
          el: el
        };
        try {
          parsedDate = settings.parseDateTime(text);
          if (parsedDate.toString().match(/Invalid/)) {
            throw text + " could not be parsed to valid DateTime.";
          }
        } catch (error) {
          data.error = error;
          el.trigger(settings.eventPrefix + ".error", data);
          settings.onError(data);
          return false;
        }
        update = function() {
          data.remainingMilliseconds = millisecondsToEnd(parsedDate);
          data.parsedDate = parsedDate;
          if ((Math.abs(data.remainingMilliseconds) < settings.interval) || (data.remainingMilliseconds > 0)) {
            el.trigger(settings.eventPrefix + ".end", data);
            return settings.onEnd(data);
          } else {
            data.timerId = setTimeout(function() {
              return update();
            }, settings.interval);
            el.trigger(settings.eventPrefix + ".update", data);
            return settings.onUpdate(data);
          }
        };
        return update();
      });
    }
  });

}).call(this);
