// Generated by CoffeeScript 1.3.3
/*
jquery-countdown
================

The jquery-countdown plugin:
- Continuously measures the milliseconds between the current Date ( according to the browser )
   and a given future Date specified in the elements on which the plugin is initialized.

- Emits the following events:
   - countdown.update - emitted if the milliseconds until the future Date are less than the epoch milliseconds of the
                      current Date.
   - countdown.end    - emitted if the milliseconds until the future Date are equal to or greater than the epoch
                      milliseconds of the current Date.

- Executes the following callbacks ( which receive references to both element and milliseconds remaining ):
   - onUpdate         - executed if the milliseconds until the future Date are less than the epoch milliseconds of the
                      current Date.
   - onEnd            - executed if the milliseconds until the future Date are equal to or greater than the epoch
                      milliseconds of the current Date.

Usage
=====

You should have one or more elements in which a valid Date ( see important notes below ) is specified, like so:

        <span>2011/04/01</span>

You may initialize this plugin on those elements using the following jQuery:

        $('span').countdown();

To bind to events on those elements:

        $('span').bind("countdown.update", function() { $(this).css("background-color", "#ffc" ); });

        $('span').bind("countdown.end", function() { $(this).css("background-color", "#f66" ); });

To initialize with custom callbacks and a custom interval:

        $('span').countdown({
                onUpdate: function( el, remainingMilliseconds ) { el.css("background-color", "#ffc"); },
                onEnd: function( el, remainingMilliseconds ) { el.css("background-color", "#f66"); },
                interval: 10000
        });

While this plugin should correctly parse most datetime strings in the format YYYY-MM-DD HH:mm:ss, you may pass a custom
datetime parsing function into the initializer if your datetime strings require special handling or to take advantage
of third-parting parsing libraries.

        $('span').countdown({
                parseDateTime: function( input ) {
                    var temp = ('' + input).replace(/-/g,"/").replace(/[TZ]/g," ");
                    return new Date( temp );
                }
        });

License
=======

This plugin was written in 2013 by Jon Fuller and is released under the MIT license.
*/(function(){var e;e=jQuery,e.fn.extend({countdown:function(t){var n,r,i;return n={eventPrefix:"countdown.",interval:5e3,onEnd:function(e,t){},onUpdate:function(e,t){},parseDateTime:function(e){var t;return t=(""+e).replace(/-/g,"/").replace(/[TZ]/g," "),new Date(t)}},i=e.extend(n,t),r=function(e,t){return e instanceof Date?(new Date).getTime()-e:0},this.each(function(){var t,n,s,o;t=e(this),s=t.text();try{n=i.parseDateTime(s);if(n.toString().match(/Invalid/))throw s+" is not valid DateTime."}catch(u){n=null}if(n===null)return;return o=function(){var e;return e=r(n),Math.abs(e)<i.interval||e>0?(t.trigger(i.eventPrefix+"end",t),i.onEnd(t,e)):(t.trigger(i.eventPrefix+"update",t),i.onUpdate(t,e),setTimeout(function(){return o()},i.interval))},o()})}})}).call(this)